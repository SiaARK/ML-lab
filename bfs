import heapq

def best_first_search(graph, start, goal):
    frontier = [(0, start, [start])]  # Priority queue (cost, node, path)
    explored = set()  # Set to keep track of explored nodes

    while frontier:
        cost, current_node, path = heapq.heappop(frontier)
        explored.add(current_node)

        if current_node == goal:
            return path  # Return the path taken

        for neighbor, neighbor_cost in graph[current_node]:
            if neighbor not in explored:
                new_cost = cost + neighbor_cost
                new_path = path + [neighbor]
                heapq.heappush(frontier, (new_cost, neighbor, new_path))

    return None  # Goal not reachable

# Example graph
graph = {
    'A': [('B', 5), ('C', 7)],
    'B': [('D', 3)],
    'C': [('E', 4)],
    'D': [('F', 6)],
    'E': [('F', 2)],
    'F': []
}

start_node = 'A'
goal_node = 'F'
path = best_first_search(graph, start_node, goal_node)

if path:
    print(f"Path from '{start_node}' to '{goal_node}': {path}")
else:
    print(f"No path found from '{start_node}' to '{goal_node}'.")