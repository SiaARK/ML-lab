import heapq

def astar(start, goal, neighbors_func, heuristic_func):
    open_set = [(0, start)]  # Priority queue with f-score and node
    came_from = {}  # Parent node for each visited node
    g_score = {start: 0}  # Cost from start along best known path

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]  # Return reversed path

        for neighbor in neighbors_func(current):
            tentative_g = g_score[current] + 1  # Assuming cost of 1 for each step

            if tentative_g < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score = tentative_g + heuristic_func(neighbor, goal)
                heapq.heappush(open_set, (f_score, neighbor))

    return None  # No path found

# Example usage:
def get_neighbors(node):
    x, y = node
    neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]  # Right, Left, Down, Up
    return [(x, y) for x, y in neighbors if 0 <= x < 5 and 0 <= y < 5]  # Assuming a 5x5 grid

def manhattan_distance(node, goal):
    x1, y1 = node
    x2, y2 = goal
    return abs(x1 - x2) + abs(y1 - y2)

start_node = (0, 0)
goal_node = (4, 4)
path = astar(start_node, goal_node, get_neighbors, manhattan_distance)
if path:
    print("Path found:", path)
else:
    print("No path found")